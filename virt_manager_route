#!/bin/bash
echo;
# Check if the UID is 0 (root)
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root!" >&2
    read -rp "The program will finish (Type 'ok' or 'any key'): " response1
    exit 1  # Exit the script with an error code
fi

# The script continues here if the user is root
echo "You are logged in as root. Continuing the script..."
echo;

echo "----------------------------------------------------------------------------------------------------";
echo "QEMU-KVM Virt-Manager Route Network Configuration";
echo "----------------------------------------------------------------------------------------------------";

# Function to display and read input, and assign the input to variables
read_input() {
    read -rp "$1" value
    echo "$2: $value"
    echo ""
    #echo "$value"  # Return the value so we can assign it to the corresponding variable
}

# Choose between default or manual input
echo "Choose an option: "
echo "1) Use default network settings based router ip 192.168.0.1"
echo "2) Enter data manually"
read -rp "Choose an option (1 or 2): " choice
echo ""

if [ "$choice" -eq 1 ]; then
    # Default network settings
ip="192.168.0.103";
netmask="255.255.255.0";
dhcp_min="192.168.0.104";
dhcp_max="192.168.0.254";
    
    echo "Default network selected."
    echo "IP Address: $ip"
    echo "Netmask: $netmask"
    echo "DHCP Range: $dhcp_min - $dhcp_max"
else
    # Manual data input, assign the input values to variables
read -rp "Enter the ip address:" ip
echo "The chosen ip address is: $ip"
echo "";

read -rp "Enter the netmask:" netmask
echo "The chosen netmask is: $netmask"
echo "";

read -rp "Dhcp range begin with:" dhcp_min
echo "The chosen begining address range is: $dhcp_min"
echo "";

read -rp "Dhcp range finalizing with:" dhcp_max
echo "The chosen final address range is: $dhcp_min"
echo "";
    
    
    
    #returning with errors...
    #ip=$(read_input "Enter the IP address:")
    #echo "The chosen ip address is: $ip"
    #netmask=$(read_input "Enter the netmask:")
    #echo "The chosen netmask is: $netmask"
    #dhcp_min=$(read_input "DHCP range start address:")
    #echo "The starting address of the DHCP range is: $dhcp_min"
    #dhcp_max=$(read_input "DHCP range end address:")
    #echo "The ending address of the DHCP range is: $dhcp_max"

fi

echo "";
read -rp "Enter the network interface:" interface
echo "The chosen network interface is: $interface"
echo "";


echo "Creating file routed.xml for network configuration "
cat > routed.xml << EOF
<network>
  <name>routed</name>
  <bridge name="virbr1"/>
  <forward mode="route" dev="$interface"/>
  <ip address="$ip" netmask="$netmask">
    <dhcp>
      <range start="$dhcp_min" end="$dhcp_max"/>
    </dhcp>
  </ip>
</network>
EOF

sudo echo "Turn off network...";
sudo echo "";
sudo echo "sudo nmcli networking off;";
sudo service network-manager stop;
sudo systemctl stop NetworkManager;
sudo nmcli networking off;
sudo echo "";


echo;
echo "Restarting virt-manager services..."
echo;
sudo systemctl stop libvirtd.socket;
sudo systemctl stop libvirtd-admin.socket;
sudo systemctl stop libvirtd-ro.socket;
sudo systemctl stop libvirtd;

sudo systemctl status libvirtd.socket;
sudo systemctl status libvirtd-admin.socket;
sudo systemctl status libvirtd-ro.socket;

sudo systemctl stop libvirtd;
sudo systemctl disable libvirtd;
sudo systemctl enable libvirtd;
sudo systemctl start libvirtd;
sudo systemctl restart libvirtd;
sudo systemctl status libvirtd;

sudo systemctl start libvirtd.socket;
sudo systemctl start libvirtd-admin.socket;
sudo systemctl start libvirtd-ro.socket;
sudo systemctl restart libvirtd.socket;
sudo systemctl restart libvirtd-admin.socket;
sudo systemctl restart libvirtd-ro.socket;

echo;
echo "Deleting firewall rules..."
echo;
sudo iptables -F  # Remove as regras de todas as chains
sudo iptables -X  # Apaga todas as chains
sudo iptables -Z  # Zera as regras de todas as chains
sudo iptables -P INPUT ACCEPT;
sudo iptables -P FORWARD ACCEPT;
sudo iptables -P OUTPUT ACCEPT;
sudo iptables -t filter -F;
sudo iptables -t filter -X;
sudo iptables -t filter -Z;
sudo iptables -t nat -F;
sudo iptables -t nat -X;
sudo iptables -t nat -Z;
sudo iptables -t mangle -F;
sudo iptables -t mangle -X;
sudo iptables -t mangle -Z;
sudo iptables -t raw -F;
sudo iptables -t raw -X;
sudo iptables -t raw -Z;

echo;
echo "Alowing (ip forward)"
echo;
sudo echo "Comando: sudo echo 1 > /proc/sys/net/ipv4/ip_forward";
sudo echo 1 > /proc/sys/net/ipv4/ip_forward;
sudo echo "";

sudo echo "Checando com cat /proc/sys/net/ipv4/ip_forward";
sudo echo "Precisa estar 1";
cat /proc/sys/net/ipv4/ip_forward;
sudo echo "";

echo "Route Mode config do not add firewall rules so...";
echo "Configuring basic firewall rules for security...";
# Definindo políticas padrões
######################
sudo iptables  -P  INPUT DROP  # iptables a política padrão da chain INPUT é proibir tudo
sudo iptables  -P  FORWARD DROP
sudo iptables  -P  OUTPUT ACCEPT


# Liberando a Loopback
####################
sudo iptables -A  INPUT -i lo -j ACCEPT
sudo iptables -A  FORWARD -i lo -j DROP

## Regras de segurança na internet e acessos
## ethx tem que mudar, use ifconfig e cheque qual é, no caso ether
#####################################
sudo iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
sudo iptables -A FORWARD -m state --state ESTABLISHED,RELATED -j DROP

#Bloqueando novas conexões e conexões invalidas após ter a conexão estabelecida e relatada
sudo iptables -A INPUT -m state --state INVALID -j DROP
sudo iptables -A FORWARD -m state --state INVALID -j DROP
sudo iptables -A INPUT -m state --state NEW -j DROP

#SOMENTE PCS DENTRO DA REDE PODEM SE CONECTAR
sudo iptables -A INPUT -p tcp --syn -s 192.168.0.0/255.255.255.0 -j ACCEPT;
sudo iptables -A INPUT -p tcp --syn -j DROP;
sudo iptables -A INPUT -i ppp0 -p udp --dport 0:30000 -j DROP;

sudo echo "";

echo;
echo "Configuring virt-manager..."
echo;
echo "sudo virsh list --all;";
sudo virsh list --all;
echo "";
echo "sudo virsh net-define routed.xml;";
sudo virsh net-define routed.xml;
echo "";
echo "sudo virsh net-start routed;";
sudo virsh net-start routed;
echo "";
echo "sudo virsh net-autostart routed;";
sudo virsh net-autostart routed;
echo;


sudo echo "Restarting Network...";
sudo echo "";
sudo service network-manager stop;
sudo service network-manager start;
sudo service network-manager restart;
sudo systemctl stop NetworkManager;
sudo systemctl disable NetworkManager;
sudo systemctl enable NetworkManager;
sudo systemctl start NetworkManager;
sudo systemctl restart NetworkManager;
sudo nmcli networking off;
sudo nmcli networking on;
sudo echo;

sudo echo "";
echo "############################ IPTABLES Rules ############################"
sudo echo "";
sudo echo "############################ Table Filter ############################";
sudo iptables -t filter -S;
sudo echo "";

sudo echo "############################ Table Nat ############################";
sudo iptables -t nat -S;
sudo echo "";

sudo echo "############################ Table Mangle ############################";
sudo iptables -t mangle -S;
sudo echo "";

sudo echo "############################ Table Raw ############################";
sudo iptables -t raw -S;
sudo echo "############################ End IPTABLES Rules ############################";
sudo echo "";

echo;
echo "List of all virt manager network"
echo;
sudo virsh list --all;
echo;







